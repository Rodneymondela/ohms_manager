"""Set ondelete=SET NULL for recorded_by fields in Exposure and HealthRecord

Revision ID: 0977195c6912
Revises: 4335e9daad38
Create Date: 2025-06-09 06:13:37.725901

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0977195c6912'
down_revision = '4335e9daad38'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Provide conventional names for the NEW constraints for SQLite batch mode
    new_fk_exposures_recorded_by = 'fk_exposures_recorded_by_users_setnull'
    new_fk_health_records_recorded_by = 'fk_health_records_recorded_by_users_setnull'

    with op.batch_alter_table('exposures', schema=None) as batch_op:
        # For SQLite, batch mode often recreates table. We define the final state.
        # If an old unnamed FK exists, this process should replace it.
        # We might need to drop the old FK if its definition conflicts directly beyond just ondelete.
        # However, an ondelete change typically forces table recreation in batch mode.
        # Let's try without explicit drop first, relying on batch to rebuild.
        # If this fails, we'd need to find the old FK names to drop them.
        # The create_foreign_key needs a name for the new constraint.
        batch_op.create_foreign_key(new_fk_exposures_recorded_by, 'users', ['recorded_by'], ['id'], ondelete='SET NULL')

    with op.batch_alter_table('health_records', schema=None) as batch_op:
        batch_op.create_foreign_key(new_fk_health_records_recorded_by, 'users', ['recorded_by'], ['id'], ondelete='SET NULL')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Provide conventional names for the NEW constraints for SQLite batch mode
    # These names should match what was used in upgrade if they were created there.
    new_fk_exposures_recorded_by = 'fk_exposures_recorded_by_users_setnull'
    new_fk_health_records_recorded_by = 'fk_health_records_recorded_by_users_setnull'

    # Original (potentially unnamed or differently named) FKs to restore if needed.
    # For downgrade, we assume the default naming by SQLAlchemy if no explicit name was given in initial migration.
    # This part of downgrade might need adjustment if initial FKs had specific names.
    original_fk_exposures = 'fk_exposures_recorded_by_users' # A guess or conventional name
    original_fk_health_records = 'fk_health_records_recorded_by_users' # A guess

    with op.batch_alter_table('health_records', schema=None) as batch_op:
        batch_op.drop_constraint(new_fk_health_records_recorded_by, type_='foreignkey')
        batch_op.create_foreign_key(original_fk_health_records, 'users', ['recorded_by'], ['id']) # Default ondelete

    with op.batch_alter_table('exposures', schema=None) as batch_op:
        batch_op.drop_constraint(new_fk_exposures_recorded_by, type_='foreignkey')
        batch_op.create_foreign_key(original_fk_exposures, 'users', ['recorded_by'], ['id']) # Default ondelete

    # ### end Alembic commands ###
